buildscript {
    repositories {
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsGradlePluginVersion"
        classpath 'org.asciidoctor:asciidoctor-gradle-jvm:3.3.2'
        classpath 'org.asciidoctor:asciidoctor-gradle-jvm-pdf:3.3.2'
        classpath 'org.asciidoctor:asciidoctor-gradle-jvm-epub:3.3.2'
        classpath 'org.ajoberstar:gradle-git:1.7.2'
        classpath "org.grails.plugins:hibernate5:${gormHibernateVersion-".RELEASE"}"
        classpath "de.undercouch:gradle-download-task:5.1.0"
    }
}

version project.projectVersion
group "org.grails.plugins"

apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: "org.grails.grails-plugin"
apply plugin: "org.grails.internal.grails-plugin-publish"
apply plugin: "org.grails.grails-gsp"
apply plugin: "de.undercouch.download"
apply plugin: "maven-publish"

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    maven { url "https://repo.grails.org/grails/core" }
}

dependencyManagement {
    imports {
        mavenBom "org.grails:grails-bom:$grailsVersion"
    }
    applyMavenExclusions false
}

jar {
    exclude "test/**"
    exclude "test/**/**"
}

groovydoc {
    exclude "test/**"
    exclude "test/**/**"
}

sourcesJar {
    exclude "test/**"
    exclude "test/**/**"
    archiveClassifier.set('sources')
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-logging'
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-autoconfigure"
    implementation "org.springframework.boot:spring-boot-starter-tomcat"
    implementation "org.grails:grails-web-boot"
    implementation "org.grails:grails-dependencies"

    implementation "org.grails:grails-plugin-services"
    implementation "org.grails:grails-plugin-domain-class"

    implementation "org.grails:grails-core"
    implementation "org.grails.plugins:hibernate5"
    implementation "org.grails.plugins:cache"
    implementation "org.hibernate:hibernate-ehcache"
    implementation "org.apache.logging.log4j:log4j-api:2.18.0"
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.18.0'
    implementation "org.opensearch:opensearch:${elasticsearchVersion}"
    implementation group: 'org.opensearch.client', name: 'opensearch-rest-client', version: elasticsearchVersion
    implementation group: 'org.opensearch.client', name: 'opensearch-rest-high-level-client', version: elasticsearchVersion
    implementation group: 'org.locationtech.spatial4j', name: 'spatial4j', version: '0.8'

    console "org.grails:grails-console"

    profile "org.grails.profiles:web-plugin"

    testRuntimeOnly 'com.spatial4j:spatial4j:0.5'
    testRuntimeOnly 'org.apache.tomcat:tomcat-jdbc'

    testImplementation "org.grails:grails-gorm-testing-support"
    testImplementation "org.grails:grails-web-testing-support"

    testImplementation 'com.vividsolutions:jts:1.13'
    testImplementation 'com.googlecode.json-simple:json-simple:1.1.1'

    implementation fileTree(dir: "libs/elasticsearch", include: '*.jar')
}

task cleanLibsDir(type: Delete) {
    delete fileTree(dir: 'libs')
}

check.finalizedBy("cleanDataDir")
clean.finalizedBy("cleanDataDir", "cleanLibsDir")

task cleanDataDir(type: Delete) {
    delete fileTree(dir: 'data')
}

tasks.withType(Test) {
    afterTest { desc, result ->
        logger.quiet " -- Executed test ${desc.name} [${desc.className}] with result: ${result.resultType}"
    }
    testLogging {
        events "passed", "skipped", "failed"//, "standardOut"
        showExceptions true
        exceptionFormat "full"
        showCauses true
        showStackTraces true
    }
}

bootRun {
    jvmArgs('-Dspring.output.ansi.enabled=always')
    sourceResources sourceSets.main
}
// enable if you wish to package this plugin as a standalone application
bootJar.enabled = false

// apply from: "gradle/documentation.gradle"

// apply from: "gradle/publish.gradle"

grailsPublish {
    githubSlug = 'grails-plugins/elasticsearch-grails-plugin'
    license {
        name = 'Apache-2.0'
    }
    title = "Elasticsearch Grails Plugin"
    //rep = "grails-plugins"
    desc = "An Elasticsearch plugin for Grails"
    developers = [
            noam: 'Noam Y. Tenne',
            macrcos: 'Marcos Carceles',
            puneet: 'Puneet Behl',
            james: 'James Kleeh',
            cgoit: 'Carsten GÃ¶tzinger'
    ]
}

publishing {
    repositories {
        maven {
            name = 'ochre-libs'
            url = "https://repos.ochre.io/repository/ochre-libs/"
            /*
             * Set these values locally in ~/.gradle/gradle.properties:
             *
             * ochreLibsRepoUsername=myRepoUser
             * ochreLibsRepoPassword=myRepoPassword
             */
            credentials {
                username ochreLibsRepoUsername
                password ochreLibsRepoPassword
            }
        }
    }
}


buildscript {
    repositories {
        maven { url 'https://plugins.gradle.org/m2/'}
        maven { url 'https://repo.grails.org/grails/core' }
    }
    dependencies {
        classpath 'org.asciidoctor:asciidoctor-gradle-jvm:3.1.0'
        classpath 'org.asciidoctor:asciidoctor-gradle-jvm-pdf:3.1.0'
        classpath 'org.asciidoctor:asciidoctor-gradle-jvm-epub:3.1.0'
    }
}

apply plugin: 'org.asciidoctor.jvm.convert'
apply plugin: 'org.asciidoctor.jvm.pdf'
apply plugin: 'org.asciidoctor.jvm.epub'

def asciidoctorAttributes = [
        copyright           : 'Apache License, Version 2.0',
        docinfo1            : 'true',
        doctype             : 'book',
        encoding            : 'utf-8',
        icons               : 'font',
        id                  : project.name + ':' + project.version,
        idprefix            : '',
        idseparator         : '-',
        lang                : 'en',
        linkattrs           : true,
        numbered            : '',
        producer            : 'Asciidoctor',
        revnumber           : project.version,
        setanchors          : true,
        'source-highlighter': 'prettify',
        toc                 : 'left',
        toc2                : '',
        toclevels           : '2',
        grailsVersion       : project.grailsVersion,
        elasticsearchVersion: project.elasticsearchVersion
]

import org.asciidoctor.gradle.jvm.AsciidoctorTask

asciidoctor {
    attributes asciidoctorAttributes
    outputDir new File(buildDir, 'docs/manual')
    sourceDir = file('src/docs')
    sources {
        include 'index.adoc'
        include 'ref/index.adoc'
    }
}

tasks.withType(AsciidoctorTask) {
    configure {
        baseDirFollowsSourceDir()
        outputOptions {
            separateOutputDirs = false
            backends = ['html5', 'pdf']
        }
    }
}

tasks.register("docs") {
    dependsOn = ["asciidoctor"]
    group = "documentation"
    doLast {
        File dir = new File(buildDir, 'docs/manual')
        ['pdf'].each { String ext ->
            File f = new File(dir, 'index.' + ext)
            if (f.exists()) {
                f.renameTo new File(dir, project.name + '-' + project.version + '.' + ext)
            }
        }

        File quickRefDir = new File(buildDir, 'docs/manual/ref')
        ['pdf'].each { String ext ->
            File f = new File(quickRefDir, 'index.' + ext)
            if (f.exists()) {
                f.renameTo new File(quickRefDir, project.name + '-' + project.version + '-' + 'quickReference' + '.' + ext)
            }
        }

        File ghpages = new File(buildDir, 'docs/index.html')
        if (ghpages.exists()) {
            ghpages.delete()
        }
        ghpages << file('src/docs/index.tmpl').text.replaceAll('@VERSION@', project.version)

        copy {
            from 'src/docs'
            into new File(buildDir, 'docs/manual').path
            include '**/*.png'
        }
    }
}